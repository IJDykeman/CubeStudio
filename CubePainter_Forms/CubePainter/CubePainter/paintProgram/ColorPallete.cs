using System;
using System.Threading;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace CubePainter
{
    static class ColorPallete
    {
        public static Color[] colorArray;
        static Color[] OLDcolorArray;

        


        public static void loadContent()
        {
            String[] colorStringArray = {
                                  #region colors

"0,0,0",
"15,15,15",
"31,31,31",
"47,47,47",
"63,63,63",
"75,75,75",
"91,91,91",
"107,107,107",
"123,123,123",
"139,139,139",
"155,155,155",
"171,171,171",
"187,187,187",
"203,203,203",
"219,219,219",
"235,235,235",
"99,76,35",
"93,69,33",
"82,63,30",
"80,61,28",
"70,55,24",
"65,49,24",
"60,43,25",
"55,40,21",
"47,34,18",
"46,32,19",
"40,26,13",
"38,24,13",
"24,20,11",
"23,18,14",
"18,15,10",
"16,13,8",
"96,95,111",
"91,91,103",
"91,83,96",
"87,79,92",
"82,75,83",
"80,71,76",
"72,63,68",
"64,60,61",
"59,55,54",
"51,47,46",
"47,43,42",
"39,39,39",
"35,35,35",
"27,27,27",
"23,23,23",
"19,19,19",
"143,119,83",
"124,100,64",
"114,91,59",
"104,81,49",
"207,151,74",
"172,125,57",
"140,103,48",
"115,83,36",
"235,159,37",
"207,140,35",
"176,119,30",
"149,99,26",
"120,79,23",
"94,60,12",
"64,39,9",
"39,24,5",
"167,60,44",
"159,47,35",
"151,44,28",
"140,37,18",
"127,31,15",
"115,23,10",
"102,23,8",
"85,20,0",
"74,15,0",
"68,15,0",
"59,16,0",
"51,11,0",
"43,11,0",
"37,10,0",
"25,7,0",
"21,6,0",
"122,95,74",
"114,86,65",
"108,83,63",
"102,80,57",
"96,70,55",
"88,66,52",
"82,63,48",
"74,55,41",
"68,51,41",
"64,47,37",
"55,38,28",
"49,35,24",
"39,26,18",
"32,24,13",
"21,16,10",
"16,11,5",
"112,60,23",
"94,56,20",
"83,47,23",
"66,44,21",
"54,35,20",
"40,26,13",
"28,19,12",
"16,11,7",
"179,91,79",
"191,123,110",
"204,155,148",
"216,187,183",
"202,215,223",
"180,198,210",
"159,183,195",
"137,166,182",
"117,150,167",
"92,137,156",
"72,119,139",
"48,106,126",
"22,83,111",
"18,75,104",
"16,66,89",
"10,62,84",
"7,55,75",
"6,49,66",
"7,40,49",
"0,33,45",
"0,23,31",
"0,13,20",
"0,7,9",
"0,1,2",
"139,88,87",
"131,80,79",
"123,72,71",
"116,68,68",
"107,59,59",
"100,52,52",
"91,47,48",
"87,43,44",
"75,35,35",
"64,30,29",
"51,27,27",
"43,19,19",
"31,15,15",
"20,10,9",
"11,7,6",
"0,0,0",
"151,159,120",
"144,152,113",
"135,139,106",
"126,132,98",
"119,123,96",
"115,116,85",
"107,108,77",
"100,101,70",
"89,91,67",
"80,79,59",
"68,66,53",
"55,55,43",
"46,48,37",
"35,36,28",
"23,22,18",
"14,15,10",
"159,75,64",
"147,68,55",
"139,59,48",
"127,54,39",
"119,47,35",
"108,42,26",
"99,35,23",
"88,30,18",
"79,27,14",
"69,23,10",
"56,19,11",
"44,14,6",
"31,12,8",
"25,7,0",
"11,0,0",
"0,0,0",
"78,128,36",
"76,124,36",
"72,118,35",
"70,114,35",
"67,108,33",
"64,102,33",
"62,98,32",
"59,94,32",
"55,87,30",
"53,82,30",
"50,78,28",
"47,73,27",
"44,66,27",
"41,62,27",
"38,57,25",
"36,52,25",
"81,132,36",
"78,128,36",
"75,123,35",
"72,118,35",
"69,112,34",
"67,107,34",
"64,102,33",
"61,97,33",
"58,91,31",
"55,86,31",
"53,82,30",
"49,76,29",
"47,70,29",
"44,66,29",
"41,61,27",
"38,55,27",
"62,79,27",
"55,67,19",
"47,59,11",
"35,47,7",
"28,35,1",
"19,23,0",
"11,15,0",
"251,255,253",
"255,255,213",
"252,254,171",
"255,255,128",
"252,254,85",
"254,255,39",
"254,236,28",
"254,215,24",
"253,194,14",
"254,171,7",
"255,147,0",
"239,127,1",
"225,107,1",
"211,87,1",
"199,70,2",
"183,58,0",
"170,43,2",
"156,31,1",
"144,22,0",
"127,15,1",
"115,7,0",
"95,0,0",
"71,0,0",
"48,0,0",
"28,0,0",
"239,0,0",
"54,53,253",
"254,0,2",
"2,1,255",
"43,43,33",
"28,27,22",
"19,20,14",
"233,153,128",
"195,114,84",
"163,87,51",
"123,63,27",
"235,207,195",
"200,171,153",
"167,142,122",
"134,108,85",
"152,94,83",



        #endregion
                              };

            String[] OLDcolorStringArray = {
                                  #region colors
"0,0,0",
"37,37,37",
"52,52,52",
"78,78,78",
"104,104,104",
"117,117,117",
"142,142,142",
"164,164,164",
"184,184,184",
"197,197,197",
"208,208,208",
"215,215,215",
"225,225,225",
"234,234,234",
"244,244,244",
"255,255,255",
"65,32,0",
"84,40,0",
"118,55,0",
"154,80,0",
"195,104,6",
"228,123,7",
"255,145,26",
"255,171,29",
"255,197,31",
"255,208,59",
"255,216,76",
"255,230,81",
"255,244,86",
"255,249,112",
"255,255,144",
"255,255,170",
"69,25,4",
"114,30,17",
"159,36,30",
"179,58,32",
"200,81,32",
"227,105,32",
"252,129,32",
"253,140,37",
"254,152,44",
"255,174,56",
"255,185,70",
"255,191,81",
"255,198,109",
"255,213,135",
"255,228,152",
"255,230,171",
"93,31,12",
"122,36,13",
"152,44,14",
"176,47,15",
"191,54,36",
"211,78,42",
"231,98,62",
"243,110,74",
"253,120,84",
"255,138,106",
"255,152,124",
"255,164,139",
"255,179,158",
"255,194,178",
"255,208,195",
"255,218,208",
"74,23,0",
"114,31,0",
"168,19,0",
"200,33,10",
"223,37,18",
"236,59,36",
"250,82,54",
"252,97,72",
"255,112,95",
"255,126,126",
"255,143,143",
"255,157,158",
"255,171,173",
"255,185,189",
"255,199,206",
"255,202,222",
"73,0,54",
"102,0,75",
"128,3,95",
"149,15,116",
"170,34,136",
"186,61,153",
"202,77,169",
"215,90,182",
"228,103,195",
"239,114,206",
"251,126,218",
"255,141,225",
"255,157,229",
"255,165,231",
"255,175,234",
"255,184,236",
"72,3,108",
"92,4,136",
"101,13,144",
"123,35,167",
"147,59,191",
"157,69,201",
"167,79,211",
"178,90,222",
"189,101,233",
"197,109,241",
"206,118,250",
"213,131,255",
"218,144,255",
"222,156,255",
"226,169,255",
"230,182,255",
"5,30,129",
"6,38,165",
"8,47,202",
"38,61,212",
"68,76,222",
"79,90,236",
"90,104,255",
"101,117,255",
"113,131,255",
"128,145,255",
"144,160,255",
"151,169,255",
"159,178,255",
"175,190,255",
"192,203,255",
"205,211,255",
"11,7,121",
"32,28,142",
"53,49,163",
"70,66,180",
"87,83,197",
"97,93,207",
"109,105,219",
"123,119,233",
"137,133,247",
"145,141,255",
"156,152,255",
"167,164,255",
"178,175,255",
"187,184,255",
"195,193,255",
"211,209,255",
"29,41,90",
"29,56,118",
"29,72,146",
"29,92,172",
"29,113,198",
"50,134,207",
"72,155,217",
"78,168,236",
"85,182,255",
"105,202,255",
"116,203,255",
"130,211,255",
"141,218,255",
"159,212,255",
"180,226,255",
"192,235,255",
"0,75,89",
"0,93,110",
"0,111,132",
"0,132,156",
"0,153,191",
"0,171,202",
"0,188,222",
"0,208,245",
"16,220,255",
"62,225,255",
"100,231,255",
"118,234,255",
"139,237,255",
"154,239,255",
"177,243,255",
"199,246,255",
"0,72,0",
"0,84,0",
"3,107,3",
"14,118,14",
"24,128,24",
"39,146,39",
"54,164,54",
"78,185,78",
"81,205,81",
"114,218,114",
"124,228,124",
"133,237,133",
"153,242,153",
"179,247,179",
"195,249,195",
"205,252,205",
"22,64,0",
"28,83,0",
"35,102,0",
"40,120,0",
"46,140,0",
"58,152,12",
"71,165,25",
"81,175,35",
"92,186,46",
"113,207,67",
"133,227,87",
"141,235,95",
"151,245,105",
"160,254,114",
"177,255,138",
"188,255,154",
"44,53,0",
"56,68,0",
"68,82,0",
"73,86,0",
"96,113,0",
"108,127,0",
"121,141,10",
"139,159,28",
"158,178,47",
"171,191,60",
"184,204,73",
"194,214,83",
"205,225,83",
"219,239,108",
"232,252,121",
"242,255,171",
"70,58,9",
"77,63,9",
"84,69,9",
"108,88,9",
"144,118,9",
"171,139,10",
"193,161,32",
"208,176,47",
"222,190,61",
"230,198,69",
"237,205,76",
"245,216,98",
"251,226,118",
"252,238,152",
"253,243,169",
"253,243,190",
"64,26,2",
"88,31,5",
"112,36,8",
"141,58,19",
"171,81,31",
"181,100,39",
"191,119,48",
"208,133,58",
"225,147,68",
"237,160,78",
"249,173,88",
"252,183,92",
"255,193,96",
"255,202,105",
"255,207,126",
"255,218,150",

        #endregion
                              };

            colorArray = new Color[256];
            OLDcolorArray = new Color[256];
            stringArrayToColorArray(colorStringArray, colorArray);
            stringArrayToColorArray(OLDcolorStringArray, OLDcolorArray);

        }

        private static void stringArrayToColorArray(String[] colorStringArray, Color[] colorArray)
        {
            for (int i = 0; i < colorStringArray.Length; i++)
            {

                String[] array = colorStringArray[i].Split(',');
                colorArray[i] = new Color(Convert.ToInt32(array[0]), Convert.ToInt32(array[1]), Convert.ToInt32(array[2]));

            }
        }

        public static byte getNewByteFromOldByte(byte oldType)
        {
            if (oldType == 0)
            {
                return 0;
            }
            Color old = OLDcolorArray[oldType];
            byte newByte = 0;
 
            for (int i = 0; i <= 255; i++)
            {
                if (colorDist(colorArray[i], old) < colorDist(colorArray[newByte], old))
                {
                    newByte = (byte)i;
                }
            }
            return newByte;
        }

        public static float colorDist(Color color1, Color color2)
        {
            Vector3 one = new Vector3(color1.R, color1.G, color1.B);
            Vector3 two = new Vector3(color2.R, color2.G, color2.B);
            return Vector3.Distance(one, two);
        }
    }
}
